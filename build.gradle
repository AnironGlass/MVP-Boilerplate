// Top-level build file where you can add configuration options common to all sub-projects/modules.

import com.android.build.gradle.internal.tasks.AndroidTestTask

ext.config = "$rootProject.projectDir/config/"
apply from: "$config/dependencies.gradle"
apply from: "$config/buildTimeDetails.gradle"

buildscript {
    // Gradle will not find vars defined in an external file when referring to them
    // in the buildscript block, unless you link it from the buildscript block, too.
    apply from: "$rootProject.projectDir/config/dependencies.gradle"

    repositories {
        jcenter()
    }

    // See config/dependencies.gradle for declaration of plugins
    dependencies {
        classpath gradlePlugins.android

        // Backport of some Java 8 language features such as Lambdas and method references
        classpath gradlePlugins.retrolambda

        // Needed for Lint + Retrolambda
        classpath gradlePlugins.lombok

        // Code coverage
        classpath gradlePlugins.jacoco

        // Method count plugin for android projects
        classpath gradlePlugins.dexcount

        // Check latest version of dependencies, task: dependencyUpdates
        classpath gradlePlugins.versions
    }

    // Part of workaround for Lint + Retrolambda
    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

allprojects {
    repositories {
        jcenter()
    }

    // Workaround to prevent Gradle from stealing focus from other apps during tests run/etc
    tasks.withType(JavaForkOptions) {
        jvmArgs '-Djava.awt.headless=true'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
    distributionUrl = distributionUrl.replace("bin", "all")
}

ext.preDexLibs = !project.hasProperty('disablePreDex')
subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name)
                || 'com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
            // enable or disable pre-dexing
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    afterEvaluate {
        dependencyUpdates.outputDir = new File("${projectDir}/build/reports/versions")

        // Log instrumentation tests results
        tasks.withType(AndroidTestTask) { task ->
            task.doFirst {
                logging.level = LogLevel.INFO
            }
            task.doLast {
                logging.level = LogLevel.LIFECYCLE
            }
        }
    }
}