apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply from: "$config/codecov.gradle"
apply from: "$config/dependencies_check.gradle"
apply from: "$config/global.gradle"
apply from: "$config/quality.gradle"

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "ua.anironglass.boilerplate"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1000 // Major -> Millions, Minor -> Thousands, Bugfix -> Hundreds
        versionName '0.1.0'
        // Make generated apks contain application id and version name
        archivesBaseName = "${applicationId}-${versionName}"
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        // TODO You must set up a system environment var APP_KEY
        // TODO You should add APP_KEY to Travis environment variables
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.jks')
            keyAlias 'alias'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }

        debug {
            storeFile file('keystore/debug.jks')
            keyAlias 'android_debug_key'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles file("$config/proguard").listFiles().toList().toArray()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix ".debug"
            testCoverageEnabled true
            debuggable true
        }
    }

    sourceSets {
        // Share common test classes between unit test and instrumental test
        def sharedTestDir = "src/sharedTest/java/"
        androidTest {
            java.srcDirs += sharedTestDir
        }
        test {
            java.srcDirs += sharedTestDir
        }
    }

    //noinspection GroovyMissingReturnStatement
    lintOptions {
        // Generate a text report and write it to 'stdout'
        textReport true
        textOutput 'stdout'

        warningsAsErrors true
        abortOnError true // Fail early

        disable 'GoogleAppIndexingWarning' // App does not have deep linking
        disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK
    }

    // This allows us see tests execution progress in the output on the CI
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // App's dependencies
    compile "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
    compile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    compile "com.github.bumptech.glide:glide:$GLIDE_VERSION"
    compile "com.google.dagger:dagger:$DAGGER2_VERSION"
    compile "com.jakewharton:butterknife:$BUTTER_KNIFE_VERSION"
    compile "com.jakewharton.timber:timber:$TIMBER_VERSION"
    compile "com.squareup.okhttp3:logging-interceptor:$OKHTTP3_VERSION"
    compile "com.squareup.sqlbrite:sqlbrite:$SQL_BRITE_VERSION"
    compile "com.squareup.retrofit2:retrofit:$RETROFIT2_VERSION"
    compile "com.squareup.retrofit2:adapter-rxjava:$RETROFIT2_VERSION"
    compile "com.squareup.retrofit2:converter-gson:$RETROFIT2_VERSION"
    compile "com.trello:rxlifecycle:$RXLIFECYCLE_VERSION"
    compile "com.trello:rxlifecycle-android:$RXLIFECYCLE_VERSION"
    compile "com.trello:rxlifecycle-components:$RXLIFECYCLE_VERSION"
    compile "io.reactivex:rxandroid:$RXANDROID_VERSION"
    compile "io.reactivex:rxjava:$RXJAVA_VERSION"
    provided "org.glassfish:javax.annotation:$JAVAX_VERSION"
    annotationProcessor "com.google.dagger:dagger-compiler:$DAGGER2_VERSION"
    annotationProcessor "com.jakewharton:butterknife-compiler:$BUTTER_KNIFE_VERSION"

    // App's debug dependencies
    debugCompile "com.squareup.leakcanary:leakcanary-android:$LEAK_CANARY_VERSION"

    // App's release dependencies
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$LEAK_CANARY_VERSION"

    // Instrumentation test dependencies
    androidTestCompile "com.android.support:support-annotations:$SUPPORT_LIBRARY_VERSION"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$ESPRESSO_VERSION"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$ESPRESSO_VERSION"
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$ESPRESSO_VERSION"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$ESPRESSO_VERSION"
    androidTestCompile "com.android.support.test:rules:$SUPPORT_TEST_RUNNER_VERSION"
    androidTestCompile "com.android.support.test:runner:$SUPPORT_TEST_RUNNER_VERSION"
    androidTestCompile "junit:junit:$JUNIT_VERSION"
    androidTestCompile "org.droidparts.dexmaker:dexmaker-mockito:$DEXMAKER_VERSION"
    androidTestCompile "org.mockito:mockito-core:$MOCKITO_VERSION"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$DAGGER2_VERSION"

    // Unit tests dependencies
    testCompile "com.google.truth:truth:$TRUTH_VERSION"
    testCompile "junit:junit:$JUNIT_VERSION"
    testCompile "org.mockito:mockito-core:$MOCKITO_VERSION"
    testCompile "org.robolectric:robolectric:$ROBOLECTRIC_VERSION"
}

// Resolve gradle conflicts with dependencies
configurations.all {
    resolutionStrategy.force "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
    resolutionStrategy.force "com.android.support:design:$SUPPORT_LIBRARY_VERSION"
    resolutionStrategy.force "com.google.code.findbugs:jsr305:$FIND_BUGS_VERSION"
}

// Check if the build requires dex count
def withDexcount = project.hasProperty('withDexcount')
if (withDexcount) {
    apply plugin: 'com.getkeepsafe.dexcount'

    dexcount {
        format = 'list'
        includeFieldCount = true
        includeTotalMethodCount = true
        verbose = false
        maxTreeDepth = Integer.MAX_VALUE
    }
}