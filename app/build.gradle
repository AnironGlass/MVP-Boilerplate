apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'me.tatarka.retrolambda'
apply from: "$config/codeCoverage.gradle"
apply from: "$config/quality.gradle"

android {
    // Declared in dependencies.gradle in the root of the project.
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "ua.anironglass.boilerplate"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        // Notice that you may want to use BUILD_NUMBER from CI in real project with own CI
        versionCode versions.code
        versionName versions.name
        // Make generated apks contain application id and version name
        archivesBaseName = "${applicationId}-${versionName}"
        // Notice that we have custom Instrumentation test runner to change application class
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        // TODO You must set up a system environment var APP_KEY
        // TODO You should add APP_KEY to Travis environment variables
        // TODO Add your release keystore in /keystore folder
        release {
            storeFile file('keystore/release.jks')
            keyAlias 'alias'
            storePassword "$System.env.APP_KEY"
            keyPassword "$System.env.APP_KEY"
        }

        debug {
            storeFile file('keystore/debug.jks')
            keyAlias 'android_debug_key'
            storePassword 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles file("$config/proguard").listFiles().toList().toArray()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Enables code coverage with Jacoco only for instrumentation tests
            // Coverage for JVM tests done by config/codecov.gradle
            testCoverageEnabled true
        }

        debug {
            versionNameSuffix ".debug"
            // Enables code coverage with Jacoco only for instrumentation tests
            // Coverage for JVM tests done by config/codecov.gradle
            testCoverageEnabled true
            debuggable true
        }
    }

    sourceSets {
        // Share common test classes between unit test and instrumental test
        def sharedTestDir = "src/sharedTest/java/"
        androidTest {
            java.srcDirs += sharedTestDir
        }
        test {
            java.srcDirs += sharedTestDir
        }
    }

    //noinspection GroovyMissingReturnStatement
    lintOptions {
        // Generate a text report and write it to 'stdout'
        textReport true
        textOutput 'stdout'

        warningsAsErrors true
        abortOnError true // Fail early

        disable 'GoogleAppIndexingWarning' // App does not have deep linking
        disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK
    }

    // This allows us see tests execution progress in the output on the CI
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }

    dataBinding {
        enabled = true
    }
}

// Libraries declared in config/dependencies.gradle
dependencies {
    compile libraries.supportAnnotations
    compile libraries.supportAppCompat
    compile libraries.supportCardView
    compile libraries.supportDesign
    compile libraries.supportRecyclerView

    compile libraries.dagger2
    annotationProcessor libraries.dagger2Compiler
    androidTestAnnotationProcessor libraries.dagger2Compiler

    compile libraries.rxJava
    compile libraries.rxAndroid
    compile libraries.rxLifecycle
    compile libraries.rxLifecycleAndroid
    compile libraries.rxLifecycleComponents

    compile libraries.gson
    compile libraries.okHttp3
    compile libraries.retrofit2
    compile libraries.retrofit2GsonConverter
    compile libraries.retrofit2RxJavaAdapter

    compile libraries.butterKnife
    annotationProcessor libraries.butterKnifeCompiler

    compile libraries.glide
    compile libraries.sqlBrite
    compile libraries.timber

    // Developer tools
    compile libraries.okHttpLoggingInterceptor
    debugCompile libraries.leakCanary
    releaseCompile libraries.leakCanaryNoOp

    // Unit tests dependencies
    testCompile libraries.junit4
    testCompile libraries.mockitoCore
    testCompile libraries.robolectric
    testCompile libraries.truth

    // Instrumentation test dependencies
    androidTestCompile libraries.supportTestRunner
    androidTestCompile libraries.supportTestRules
    androidTestCompile libraries.espressoCore
    androidTestCompile (libraries.espressoContrib) {
        // Causes IncompatibleClassChangeError
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
    }
    androidTestCompile libraries.mockitoCore
    androidTestCompile libraries.dexMaker
}

// Resolve gradle conflicts with dependencies
configurations.all {
    // Force our version of libraries
    resolutionStrategy {
        // Conflict between app and rxLifecycle library
        force libraries.findBugs
        // Conflict between app and androidTest dependency resolution
        force libraries.supportAnnotations
        force libraries.supportAppCompat
        force libraries.supportDesign
    }
}

// Check if the build requires dex count
def withDexcount = project.hasProperty('withDexcount')
if (withDexcount) {
    apply plugin: 'com.getkeepsafe.dexcount'

    dexcount {
        format = 'list'
        includeFieldCount = true
        includeTotalMethodCount = true
        verbose = false
        maxTreeDepth = Integer.MAX_VALUE
    }
}